package spring.boot.application.restApi.controller;

import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import spring.boot.application.restApi.domain.AddBookResponse;
import spring.boot.application.restApi.domain.Library;
import spring.boot.application.restApi.exception.ResourceNotFoundException;
import spring.boot.application.restApi.repository.LibraryRepository;
import spring.boot.application.restApi.service.LibraryService;

import java.util.List;
import java.util.Optional;

/**
 * Entire project structure for this spring boot app is generated by https://start.spring.io/ :)
 * Access swagger through - http://localhost:8080/swagger-ui.html
 */

@RestController
@RequestMapping(value = "api/library")
public class LibraryController {

  @Autowired
  LibraryRepository libraryRepository;

  @Autowired
  LibraryService libraryService;

  private static final Logger logger = LoggerFactory.getLogger(LibraryController.class);

  @PostMapping("/addBook")
  @ApiOperation(value = "Adds book to database.",
          protocols = "http",
          notes = "Adds book to database. If book exists book will not be added.")
  public ResponseEntity<AddBookResponse> addBook(@RequestBody Library library) {
    String id = libraryService.buildId(library.getIsbn(), library.getAisle());
    boolean bookExists = libraryService.doesBookExist(id);
    String responseMessage = bookExists ? "Book already exists!" : "Success book is added!";
    HttpStatus httpStatus = bookExists ? HttpStatus.ACCEPTED : HttpStatus.CREATED;
    AddBookResponse response = new AddBookResponse();
    response.setId(id);
    HttpHeaders headers = new HttpHeaders();
    headers.add("ID", id);
    if (!bookExists) {
      logger.info("Book doesn't exist in db, creating new one.");
      library.setId(id);
      libraryRepository.save(library);
    }
    response.setMsg(responseMessage);
    return new ResponseEntity<>(response, headers, httpStatus);
  }
  
  @GetMapping("/getBooks/{id}")
  public Library getBookById(@PathVariable(value = "id") String id) {
    Optional<Library> entity = libraryRepository.findById(id);
    if (entity.isPresent()) {
      return  entity.get();
    } else {
      logger.info("Book doesn't exist.");
      throw new ResourceNotFoundException("Book is not found!");
    }
  }

  @GetMapping("/getBooks/author")
  public List<Library> getBooksByAuthor(@RequestParam(value = "authorname") String authorname) {
    return libraryRepository.findAllBooksByAuthor(authorname);
  }

  @PutMapping("/updateBook/{id}")
  public ResponseEntity<Library> updateBook(@PathVariable(value = "id") String id, @RequestBody Library library) {
    Optional<Library> maybeExistingBook = libraryRepository.findById(id);

    if (!maybeExistingBook.isPresent()) throw new ResourceNotFoundException("Book is not found!");

    Library existingBook = maybeExistingBook.get();

    if (null != library.getBook_name()) existingBook.setBook_name(library.getBook_name());
    if (null != library.getAisle()) existingBook.setAisle(library.getAisle());
    if (null != library.getAuthor()) existingBook.setAuthor(library.getAuthor());

    // TODO: Fix scenario for updating book id - we need to delete old one from Db - when aisle is not provided id remains the same
    // TODO: Fix scenario when we have new id same as existing book - is it possible scenario?

    libraryRepository.save(existingBook);

    return new ResponseEntity<>(existingBook, HttpStatus.OK);
  }

  @DeleteMapping("/deleteBook")
  public ResponseEntity<String> deleteBook(@RequestBody Library library) {
    Optional<Library> maybeExistingBook = libraryRepository.findById(library.getId());
    if (!maybeExistingBook.isPresent()) {
      logger.info("Book doesn't exist.");
      throw new ResourceNotFoundException("Book is not found!");
    }
    Library existingBook = maybeExistingBook.get();
    libraryRepository.delete(existingBook);
    return new ResponseEntity<>("Book is deleted!", HttpStatus.OK);
  }

  @GetMapping("/getBooks")
  public List<Library> getAllBooks() {
    return libraryRepository.findAll();
  }

}
